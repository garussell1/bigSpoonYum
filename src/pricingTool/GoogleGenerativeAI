
// import { GoogleGenAI } from "@google/genai";
// import PricingTool from "./PromptBuilder";

// //Make sure you use express.json() middleware to parse the request body
// //app.use(express.json());

// // Load your API key securely from environment variables
// const ai = new GoogleGenAI({});//initialize 

// // This function will call the Gemini API for a single query
// async function fetchPrice({searchQueries}: { searchQueries: string[] }) {
//   try {
//   const response = await ai.models.generateContent({
//     model: "gemini-2.5-flash",
//     contents: "Provide a price for the following items: " + searchQueries.join(", "),
//   });
//     console.log("AI response:", response.text);
//     // const model = ai.getGenerativeModel({ model: "gemini-2.5-flash" });
//     // const result = await model.generateContent(searchQueries);
//     // const response = await result.response;

//     // Assuming the AI returns just the price or a short text.
//     // You might need to parse this text further.

//     //return response.text();
//   } catch (error) {
//     console.error("Error fetching price from AI:", error);
//     return "Error fetching price";
//   }
// }


// // // Define the new API endpoint
// // app.post("/api/get-prices", async (req, res) => {
// //   const { searchQueries } = req.body;

// //   if (!searchQueries || !Array.isArray(searchQueries)) {
// //     return res.status(400).json({ error: "searchQueries must be an array." });
// //   }

// //   // Use Promise.all to make all API calls concurrently for better performance
// //   const prices = await Promise.all(searchQueries.map(query => fetchPrice(query)));

// //   res.json({ prices });
// // });
